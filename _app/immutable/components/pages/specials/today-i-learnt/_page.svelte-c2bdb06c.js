import{S as Ke,i as Re,s as Xe,w as Ve,x as Ne,y as Ue,f as je,t as Me,z as Ge,k as n,q as e,a as v,l as r,m as i,r as o,h as a,c as y,n as c,b as rt,G as t}from"../../../../chunks/index-ed5c000a.js";import{b as Ye}from"../../../../chunks/paths-b4419565.js";import{N as Ze}from"../../../../chunks/Narigo-406ea8d0.js";import{P as to}from"../../../../chunks/PageLayout-59cb6841.js";function eo(K){let s;return{c(){s=e(`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},l(m){s=o(m,`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},m(m,h){rt(m,s,h)},d(m){m&&a(s)}}}function oo(K){let s,m,h,p,C,d,$,W,mt,pt,_,gt,S,vt,yt,z,wt,_t,B,bt,F,kt,Et,It,D,A,Ct,$t,f,St,H,zt,Ft,R,Dt,xt,X,Tt,Lt,Y,Ot,qt,J,Pt,be="{ height: 100% }",Wt,Bt,At,x,Q,Ht,Jt,V,Qt,Z,Vt,Nt,T,N,Ut,jt,g,Mt,U,Gt,ke="{ ... }",Kt,Rt,tt,Xt,Yt,et,Zt,te,ot,ee,oe,ae,L,j,ne,re,E,ie,at,le,se,O,he,de,ce,q,M,fe,ue,P,me,nt,pe,ge,it;return p=new Ze({props:{$$slots:{default:[eo]},$$scope:{ctx:K}}}),{c(){s=n("h2"),m=e("Today I learnt"),h=v(),Ve(p.$$.fragment),C=v(),d=n("ul"),$=n("li"),W=n("h3"),mt=e("Drawing with linear gradients"),pt=v(),_=n("p"),gt=e("In "),S=n("a"),vt=e("VirtualCoffee.io"),yt=e(` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),z=n("a"),wt=e("CSSBattle.dev"),_t=e(`. Lately, I've tried to do
				the puzzles by styling them with
				`),B=n("code"),bt=e("background: "),F=n("a"),kt=e("linear-gradient()"),Et=e(`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),It=v(),D=n("li"),A=n("h3"),Ct=e("srcdoc sets an iframes doctype implicitly, Quirks mode expands the body height"),$t=v(),f=n("p"),St=e("When working on the Puzzle iframe for the "),H=n("a"),zt=e("Frontend Friday Folks"),Ft=e(`, I had trouble centering the image. I had the same code result in the Chrome Dev Tools as
				in CSSBattle.dev, when inspecting the elements, so I didn't realize why it still looked
				different. It looks like when using the `),R=n("code"),Dt=e("srcdoc"),xt=e(" on an "),X=n("code"),Tt=e("iframe"),Lt=e(`
				element, the iframe sets the doctype implicitly. When writing into the iframe through
				`),Y=n("code"),Ot=e("contentWindow.write"),qt=e(`, it doesn't set a doctype for the iframe and hence it stays
				in Quirks mode. Quirks mode seems to expand the body height, without having to set
				`),J=n("code"),Pt=e("html,body "),Wt=e(be),Bt=e(" or something similar."),At=v(),x=n("li"),Q=n("h3"),Ht=e("`::before` and `::after` are siblings, nested and `display: inline` in a div"),Jt=v(),V=n("p"),Qt=e(`I can never really remember how they work and during this Frontend Friday Folks puzzle, we
				looked into that again. It seems to be easier to nest divs than using the pseudo elements
				here. So to understand it better: `),Z=n("code"),Vt=e(`<div><::before>content in ::before</::before>content of
					div<::after>content in ::after</::after></div>`),Nt=v(),T=n("li"),N=n("h3"),Ut=e("Strings in JavaScript are iterable without using `split`"),jt=v(),g=n("p"),Mt=e("When using "),U=n("code"),Gt=e("for (const c of string) "),Kt=e(ke),Rt=e(`, it's not necessary to do a
				`),tt=n("code"),Xt=e("string.split('')"),Yt=e(`
				before. If you want to `),et=n("code"),Zt=e("string.map()"),te=e(" or "),ot=n("code"),ee=e("string.filter()"),oe=e(` though, you
				need to split it first.`),ae=v(),L=n("li"),j=n("h3"),ne=e("A `.github` repository for templates, code of conduct, etc."),re=v(),E=n("p"),ie=e(`I tried template repositories and forking them before, but it always felt a bit weird.
				Thanks to Bekah from VirtualCoffee.io, I learnt that you can have a `),at=n("code"),le=e(".github"),se=e(`
				repository instead of a folder in each of your projects to hold your templates. Credit goes to
				`),O=n("a"),he=e("Bekah's blog post"),de=e("!"),ce=v(),q=n("li"),M=n("h3"),fe=e("Check whether form is valid or not with CSS"),ue=v(),P=n("p"),me=e("There is a selector called "),nt=n("code"),pe=e(":invalid"),ge=e(`! Thanks to Travis Barnette for pointing
				that out in VirtualCoffee and to Justin Noel for asking this question. Up to that point, I
				thought you can only check validity with JavaScript enabled...!`),this.h()},l(l){s=r(l,"H2",{});var b=i(s);m=o(b,"Today I learnt"),b.forEach(a),h=y(l),Ne(p.$$.fragment,l),C=y(l),d=r(l,"UL",{class:!0});var u=i(d);$=r(u,"LI",{});var lt=i($);W=r(lt,"H3",{class:!0});var Ee=i(W);mt=o(Ee,"Drawing with linear gradients"),Ee.forEach(a),pt=y(lt),_=r(lt,"P",{});var I=i(_);gt=o(I,"In "),S=r(I,"A",{href:!0,rel:!0});var Ie=i(S);vt=o(Ie,"VirtualCoffee.io"),Ie.forEach(a),yt=o(I,` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),z=r(I,"A",{href:!0,rel:!0});var Ce=i(z);wt=o(Ce,"CSSBattle.dev"),Ce.forEach(a),_t=o(I,`. Lately, I've tried to do
				the puzzles by styling them with
				`),B=r(I,"CODE",{});var ve=i(B);bt=o(ve,"background: "),F=r(ve,"A",{href:!0,rel:!0});var $e=i(F);kt=o($e,"linear-gradient()"),$e.forEach(a),ve.forEach(a),Et=o(I,`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),I.forEach(a),lt.forEach(a),It=y(u),D=r(u,"LI",{});var st=i(D);A=r(st,"H3",{class:!0});var Se=i(A);Ct=o(Se,"srcdoc sets an iframes doctype implicitly, Quirks mode expands the body height"),Se.forEach(a),$t=y(st),f=r(st,"P",{});var w=i(f);St=o(w,"When working on the Puzzle iframe for the "),H=r(w,"A",{href:!0});var ze=i(H);zt=o(ze,"Frontend Friday Folks"),ze.forEach(a),Ft=o(w,`, I had trouble centering the image. I had the same code result in the Chrome Dev Tools as
				in CSSBattle.dev, when inspecting the elements, so I didn't realize why it still looked
				different. It looks like when using the `),R=r(w,"CODE",{});var Fe=i(R);Dt=o(Fe,"srcdoc"),Fe.forEach(a),xt=o(w," on an "),X=r(w,"CODE",{});var De=i(X);Tt=o(De,"iframe"),De.forEach(a),Lt=o(w,`
				element, the iframe sets the doctype implicitly. When writing into the iframe through
				`),Y=r(w,"CODE",{});var xe=i(Y);Ot=o(xe,"contentWindow.write"),xe.forEach(a),qt=o(w,`, it doesn't set a doctype for the iframe and hence it stays
				in Quirks mode. Quirks mode seems to expand the body height, without having to set
				`),J=r(w,"CODE",{});var ye=i(J);Pt=o(ye,"html,body "),Wt=o(ye,be),ye.forEach(a),Bt=o(w," or something similar."),w.forEach(a),st.forEach(a),At=y(u),x=r(u,"LI",{});var ht=i(x);Q=r(ht,"H3",{class:!0});var Te=i(Q);Ht=o(Te,"`::before` and `::after` are siblings, nested and `display: inline` in a div"),Te.forEach(a),Jt=y(ht),V=r(ht,"P",{});var we=i(V);Qt=o(we,`I can never really remember how they work and during this Frontend Friday Folks puzzle, we
				looked into that again. It seems to be easier to nest divs than using the pseudo elements
				here. So to understand it better: `),Z=r(we,"CODE",{});var Le=i(Z);Vt=o(Le,`<div><::before>content in ::before</::before>content of
					div<::after>content in ::after</::after></div>`),Le.forEach(a),we.forEach(a),ht.forEach(a),Nt=y(u),T=r(u,"LI",{});var dt=i(T);N=r(dt,"H3",{class:!0});var Oe=i(N);Ut=o(Oe,"Strings in JavaScript are iterable without using `split`"),Oe.forEach(a),jt=y(dt),g=r(dt,"P",{});var k=i(g);Mt=o(k,"When using "),U=r(k,"CODE",{});var _e=i(U);Gt=o(_e,"for (const c of string) "),Kt=o(_e,ke),_e.forEach(a),Rt=o(k,`, it's not necessary to do a
				`),tt=r(k,"CODE",{});var qe=i(tt);Xt=o(qe,"string.split('')"),qe.forEach(a),Yt=o(k,`
				before. If you want to `),et=r(k,"CODE",{});var Pe=i(et);Zt=o(Pe,"string.map()"),Pe.forEach(a),te=o(k," or "),ot=r(k,"CODE",{});var We=i(ot);ee=o(We,"string.filter()"),We.forEach(a),oe=o(k,` though, you
				need to split it first.`),k.forEach(a),dt.forEach(a),ae=y(u),L=r(u,"LI",{});var ct=i(L);j=r(ct,"H3",{class:!0});var Be=i(j);ne=o(Be,"A `.github` repository for templates, code of conduct, etc."),Be.forEach(a),re=y(ct),E=r(ct,"P",{});var G=i(E);ie=o(G,`I tried template repositories and forking them before, but it always felt a bit weird.
				Thanks to Bekah from VirtualCoffee.io, I learnt that you can have a `),at=r(G,"CODE",{});var Ae=i(at);le=o(Ae,".github"),Ae.forEach(a),se=o(G,`
				repository instead of a folder in each of your projects to hold your templates. Credit goes to
				`),O=r(G,"A",{href:!0,rel:!0});var He=i(O);he=o(He,"Bekah's blog post"),He.forEach(a),de=o(G,"!"),G.forEach(a),ct.forEach(a),ce=y(u),q=r(u,"LI",{});var ft=i(q);M=r(ft,"H3",{class:!0});var Je=i(M);fe=o(Je,"Check whether form is valid or not with CSS"),Je.forEach(a),ue=y(ft),P=r(ft,"P",{});var ut=i(P);me=o(ut,"There is a selector called "),nt=r(ut,"CODE",{});var Qe=i(nt);pe=o(Qe,":invalid"),Qe.forEach(a),ge=o(ut,`! Thanks to Travis Barnette for pointing
				that out in VirtualCoffee and to Justin Noel for asking this question. Up to that point, I
				thought you can only check validity with JavaScript enabled...!`),ut.forEach(a),ft.forEach(a),u.forEach(a),this.h()},h(){c(W,"class","svelte-1daqhfo"),c(S,"href","https://virtualcoffee.io/"),c(S,"rel","external"),c(z,"href","https://cssbattle.dev/"),c(z,"rel","external"),c(F,"href","https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient"),c(F,"rel","external"),c(A,"class","svelte-1daqhfo"),c(H,"href",Ye+"/specials/frontend-friday-folks"),c(Q,"class","svelte-1daqhfo"),c(N,"class","svelte-1daqhfo"),c(j,"class","svelte-1daqhfo"),c(O,"href","https://dev.to/opensauced/managing-community-health-files-and-templates-with-a-github-repository-l8f"),c(O,"rel","external"),c(M,"class","svelte-1daqhfo"),c(d,"class","svelte-1daqhfo")},m(l,b){rt(l,s,b),t(s,m),rt(l,h,b),Ue(p,l,b),rt(l,C,b),rt(l,d,b),t(d,$),t($,W),t(W,mt),t($,pt),t($,_),t(_,gt),t(_,S),t(S,vt),t(_,yt),t(_,z),t(z,wt),t(_,_t),t(_,B),t(B,bt),t(B,F),t(F,kt),t(_,Et),t(d,It),t(d,D),t(D,A),t(A,Ct),t(D,$t),t(D,f),t(f,St),t(f,H),t(H,zt),t(f,Ft),t(f,R),t(R,Dt),t(f,xt),t(f,X),t(X,Tt),t(f,Lt),t(f,Y),t(Y,Ot),t(f,qt),t(f,J),t(J,Pt),t(J,Wt),t(f,Bt),t(d,At),t(d,x),t(x,Q),t(Q,Ht),t(x,Jt),t(x,V),t(V,Qt),t(V,Z),t(Z,Vt),t(d,Nt),t(d,T),t(T,N),t(N,Ut),t(T,jt),t(T,g),t(g,Mt),t(g,U),t(U,Gt),t(U,Kt),t(g,Rt),t(g,tt),t(tt,Xt),t(g,Yt),t(g,et),t(et,Zt),t(g,te),t(g,ot),t(ot,ee),t(g,oe),t(d,ae),t(d,L),t(L,j),t(j,ne),t(L,re),t(L,E),t(E,ie),t(E,at),t(at,le),t(E,se),t(E,O),t(O,he),t(E,de),t(d,ce),t(d,q),t(q,M),t(M,fe),t(q,ue),t(q,P),t(P,me),t(P,nt),t(nt,pe),t(P,ge),it=!0},p(l,b){const u={};b&1&&(u.$$scope={dirty:b,ctx:l}),p.$set(u)},i(l){it||(je(p.$$.fragment,l),it=!0)},o(l){Me(p.$$.fragment,l),it=!1},d(l){l&&a(s),l&&a(h),Ge(p,l),l&&a(C),l&&a(d)}}}function ao(K){let s,m;return s=new to({props:{$$slots:{default:[oo]},$$scope:{ctx:K}}}),{c(){Ve(s.$$.fragment)},l(h){Ne(s.$$.fragment,h)},m(h,p){Ue(s,h,p),m=!0},p(h,[p]){const C={};p&1&&(C.$$scope={dirty:p,ctx:h}),s.$set(C)},i(h){m||(je(s.$$.fragment,h),m=!0)},o(h){Me(s.$$.fragment,h),m=!1},d(h){Ge(s,h)}}}class so extends Ke{constructor(s){super(),Re(this,s,null,ao,Xe,{})}}export{so as default};
