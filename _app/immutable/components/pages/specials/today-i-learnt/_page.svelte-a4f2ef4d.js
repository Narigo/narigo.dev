import{S as Y,i as Z,s as tt,w as j,x as J,y as K,f as Q,t as R,z as X,k as d,q as h,a as M,l as u,m,r as f,h as o,c as N,n as b,b as E,G as r}from"../../../../chunks/index-71762e76.js";import{N as et}from"../../../../chunks/Narigo-97af1811.js";import{P as at}from"../../../../chunks/PageLayout-a8cc42eb.js";function rt(I){let e;return{c(){e=h(`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},l(l){e=f(l,`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},m(l,a){E(l,e,a)},d(l){l&&o(e)}}}function lt(I){let e,l,a,n,p,v,w,k,C,L,s,F,g,P,T,_,A,D,y,W,$,q,B,x;return n=new et({props:{$$slots:{default:[rt]},$$scope:{ctx:I}}}),{c(){e=d("h2"),l=h("Today I learnt"),a=M(),j(n.$$.fragment),p=M(),v=d("ul"),w=d("li"),k=d("h3"),C=h("Drawing with linear gradients"),L=M(),s=d("p"),F=h("In "),g=d("a"),P=h("VirtualCoffee.io"),T=h(` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),_=d("a"),A=h("CSSBattle.dev"),D=h(`. Lately, I've tried to do
				the puzzles by styling them with
				`),y=d("code"),W=h("background: "),$=d("a"),q=h("linear-gradient()"),B=h(`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),this.h()},l(t){e=u(t,"H2",{});var i=m(e);l=f(i,"Today I learnt"),i.forEach(o),a=N(t),J(n.$$.fragment,t),p=N(t),v=u(t,"UL",{});var z=m(v);w=u(z,"LI",{});var S=m(w);k=u(S,"H3",{});var U=m(k);C=f(U,"Drawing with linear gradients"),U.forEach(o),L=N(S),s=u(S,"P",{});var c=m(s);F=f(c,"In "),g=u(c,"A",{href:!0,rel:!0});var V=m(g);P=f(V,"VirtualCoffee.io"),V.forEach(o),T=f(c,` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),_=u(c,"A",{href:!0,rel:!0});var G=m(_);A=f(G,"CSSBattle.dev"),G.forEach(o),D=f(c,`. Lately, I've tried to do
				the puzzles by styling them with
				`),y=u(c,"CODE",{});var H=m(y);W=f(H,"background: "),$=u(H,"A",{href:!0,rel:!0});var O=m($);q=f(O,"linear-gradient()"),O.forEach(o),H.forEach(o),B=f(c,`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),c.forEach(o),S.forEach(o),z.forEach(o),this.h()},h(){b(g,"href","https://virtualcoffee.io/"),b(g,"rel","external"),b(_,"href","https://cssbattle.dev/"),b(_,"rel","external"),b($,"href","https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient"),b($,"rel","external")},m(t,i){E(t,e,i),r(e,l),E(t,a,i),K(n,t,i),E(t,p,i),E(t,v,i),r(v,w),r(w,k),r(k,C),r(w,L),r(w,s),r(s,F),r(s,g),r(g,P),r(s,T),r(s,_),r(_,A),r(s,D),r(s,y),r(y,W),r(y,$),r($,q),r(s,B),x=!0},p(t,i){const z={};i&1&&(z.$$scope={dirty:i,ctx:t}),n.$set(z)},i(t){x||(Q(n.$$.fragment,t),x=!0)},o(t){R(n.$$.fragment,t),x=!1},d(t){t&&o(e),t&&o(a),X(n,t),t&&o(p),t&&o(v)}}}function ot(I){let e,l;return e=new at({props:{$$slots:{default:[lt]},$$scope:{ctx:I}}}),{c(){j(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,n){K(e,a,n),l=!0},p(a,[n]){const p={};n&1&&(p.$$scope={dirty:n,ctx:a}),e.$set(p)},i(a){l||(Q(e.$$.fragment,a),l=!0)},o(a){R(e.$$.fragment,a),l=!1},d(a){X(e,a)}}}class ht extends Y{constructor(e){super(),Z(this,e,null,ot,tt,{})}}export{ht as default};
