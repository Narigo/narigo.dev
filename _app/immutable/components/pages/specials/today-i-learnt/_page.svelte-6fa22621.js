import{S as Ft,i as Dt,s as Wt,w as It,x as Et,y as zt,f as Ct,t as xt,z as St,k as l,q as e,a as Q,l as s,m as h,r as o,h as r,c as T,n as E,b as O,G as t}from"../../../../chunks/index-543a8e9c.js";import{b as Lt}from"../../../../chunks/paths-b4419565.js";import{N as Pt}from"../../../../chunks/Narigo-aec83592.js";import{P as Qt}from"../../../../chunks/PageLayout-506349f6.js";function Tt(S){let n;return{c(){n=e(`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},l(f){n=o(f,`To remember more of the little things I learn, I want to write them down. I'll update this page
		whenever I find something worth to log. Most of this will be around web development, but I don't
		want to limit myself to that. Let's see where this leads to.`)},m(f,i){O(f,n,i)},d(f){f&&r(n)}}}function Ot(S){let n,f,i,c,y,g,v,F,q,M,u,N,_,U,V,$,G,j,z,J,k,K,R,X,b,D,Y,Z,d,tt,C,et,ot,W,at,nt,L,rt,it,P,lt,st,x,ht,ut="{ height: 100% }",dt,ft,A;return c=new Pt({props:{$$slots:{default:[Tt]},$$scope:{ctx:S}}}),{c(){n=l("h2"),f=e("Today I learnt"),i=Q(),It(c.$$.fragment),y=Q(),g=l("ul"),v=l("li"),F=l("h3"),q=e("Drawing with linear gradients"),M=Q(),u=l("p"),N=e("In "),_=l("a"),U=e("VirtualCoffee.io"),V=e(` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),$=l("a"),G=e("CSSBattle.dev"),j=e(`. Lately, I've tried to do
				the puzzles by styling them with
				`),z=l("code"),J=e("background: "),k=l("a"),K=e("linear-gradient()"),R=e(`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),X=Q(),b=l("li"),D=l("h3"),Y=e("srcdoc sets an iframes doctype implicitly, Quirks mode expands the body height"),Z=Q(),d=l("p"),tt=e("When working on the Puzzle iframe for the "),C=l("a"),et=e("Frontend Friday Folks"),ot=e(`, I had trouble centering the image. I had the same code result in the Chrome Dev Tools as
				in CSSBattle.dev, when inspecting the elements, so I didn't realize why it still looked
				different. It looks like when using the `),W=l("code"),at=e("srcdoc"),nt=e(" on an "),L=l("code"),rt=e("iframe"),it=e(`
				element, the iframe sets the doctype implicitly. When writing into the iframe through
				`),P=l("code"),lt=e("contentWindow.write"),st=e(`, it doesn't set a doctype for the iframe and hence it stays
				in Quirks mode. Quirks mode seems to expand the body height, without having to set
				`),x=l("code"),ht=e("html,body "),dt=e(ut),ft=e(" or something similar."),this.h()},l(a){n=s(a,"H2",{});var p=h(n);f=o(p,"Today I learnt"),p.forEach(r),i=T(a),Et(c.$$.fragment,a),y=T(a),g=s(a,"UL",{});var I=h(g);v=s(I,"LI",{});var B=h(v);F=s(B,"H3",{});var pt=h(F);q=o(pt,"Drawing with linear gradients"),pt.forEach(r),M=T(B),u=s(B,"P",{});var w=h(u);N=o(w,"In "),_=s(w,"A",{href:!0,rel:!0});var gt=h(_);U=o(gt,"VirtualCoffee.io"),gt.forEach(r),V=o(w,` Frontend Friday
				Folks, we have to create divs that resemble a given image on
				`),$=s(w,"A",{href:!0,rel:!0});var wt=h($);G=o(wt,"CSSBattle.dev"),wt.forEach(r),j=o(w,`. Lately, I've tried to do
				the puzzles by styling them with
				`),z=s(w,"CODE",{});var ct=h(z);J=o(ct,"background: "),k=s(ct,"A",{href:!0,rel:!0});var yt=h(k);K=o(yt,"linear-gradient()"),yt.forEach(r),ct.forEach(r),R=o(w,`. When you find out a way how to draw it like that, it always feels like a hack of the
				puzzle itself.`),w.forEach(r),B.forEach(r),X=T(I),b=s(I,"LI",{});var H=h(b);D=s(H,"H3",{});var vt=h(D);Y=o(vt,"srcdoc sets an iframes doctype implicitly, Quirks mode expands the body height"),vt.forEach(r),Z=T(H),d=s(H,"P",{});var m=h(d);tt=o(m,"When working on the Puzzle iframe for the "),C=s(m,"A",{href:!0});var _t=h(C);et=o(_t,"Frontend Friday Folks"),_t.forEach(r),ot=o(m,`, I had trouble centering the image. I had the same code result in the Chrome Dev Tools as
				in CSSBattle.dev, when inspecting the elements, so I didn't realize why it still looked
				different. It looks like when using the `),W=s(m,"CODE",{});var $t=h(W);at=o($t,"srcdoc"),$t.forEach(r),nt=o(m," on an "),L=s(m,"CODE",{});var kt=h(L);rt=o(kt,"iframe"),kt.forEach(r),it=o(m,`
				element, the iframe sets the doctype implicitly. When writing into the iframe through
				`),P=s(m,"CODE",{});var bt=h(P);lt=o(bt,"contentWindow.write"),bt.forEach(r),st=o(m,`, it doesn't set a doctype for the iframe and hence it stays
				in Quirks mode. Quirks mode seems to expand the body height, without having to set
				`),x=s(m,"CODE",{});var mt=h(x);ht=o(mt,"html,body "),dt=o(mt,ut),mt.forEach(r),ft=o(m," or something similar."),m.forEach(r),H.forEach(r),I.forEach(r),this.h()},h(){E(_,"href","https://virtualcoffee.io/"),E(_,"rel","external"),E($,"href","https://cssbattle.dev/"),E($,"rel","external"),E(k,"href","https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient"),E(k,"rel","external"),E(C,"href",Lt+"/specials/frontend-friday-folks")},m(a,p){O(a,n,p),t(n,f),O(a,i,p),zt(c,a,p),O(a,y,p),O(a,g,p),t(g,v),t(v,F),t(F,q),t(v,M),t(v,u),t(u,N),t(u,_),t(_,U),t(u,V),t(u,$),t($,G),t(u,j),t(u,z),t(z,J),t(z,k),t(k,K),t(u,R),t(g,X),t(g,b),t(b,D),t(D,Y),t(b,Z),t(b,d),t(d,tt),t(d,C),t(C,et),t(d,ot),t(d,W),t(W,at),t(d,nt),t(d,L),t(L,rt),t(d,it),t(d,P),t(P,lt),t(d,st),t(d,x),t(x,ht),t(x,dt),t(d,ft),A=!0},p(a,p){const I={};p&1&&(I.$$scope={dirty:p,ctx:a}),c.$set(I)},i(a){A||(Ct(c.$$.fragment,a),A=!0)},o(a){xt(c.$$.fragment,a),A=!1},d(a){a&&r(n),a&&r(i),St(c,a),a&&r(y),a&&r(g)}}}function At(S){let n,f;return n=new Qt({props:{$$slots:{default:[Ot]},$$scope:{ctx:S}}}),{c(){It(n.$$.fragment)},l(i){Et(n.$$.fragment,i)},m(i,c){zt(n,i,c),f=!0},p(i,[c]){const y={};c&1&&(y.$$scope={dirty:c,ctx:i}),n.$set(y)},i(i){f||(Ct(n.$$.fragment,i),f=!0)},o(i){xt(n.$$.fragment,i),f=!1},d(i){St(n,i)}}}class Nt extends Ft{constructor(n){super(),Dt(this,n,null,At,Wt,{})}}export{Nt as default};
